<?xml version="1.0" encoding="UTF-8" standalone="no"?><umlet_diagram><help_text>// Uncomment the following line to change the fontsize:
fontsize=12


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on UML elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use Â± or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text><zoom_level>10</zoom_level><element><type>com.umlet.element.base.Class</type><coordinates><x>0</x><y>110</y><w>210</w><h>130</h></coordinates><panel_attributes>immutable.List
extends LinearSeqOptimized
--
Nil
--
::(x)
:::(xs)
reverse_:::(xs)
reverse</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>0</x><y>250</y><w>210</w><h>150</h></coordinates><panel_attributes>immutable.Stream
extends LinearSeqOptimized
--
Stream.empty
--
Stream.cons
#::
append(xs)
force
scanLeft  #like foldLeft</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>0</x><y>420</y><w>210</w><h>70</h></coordinates><panel_attributes>immutable.Vector
extends IndexedSeq
--
Vector.empty
--
</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>220</x><y>480</y><w>210</w><h>190</h></coordinates><panel_attributes>immutable.Stack
extends LinearSeq
--
Stack.empty
--
push(x)
push(x,...)
pushAll(xs)
reverse
top
pop =&gt; Stack
pop2 =&gt; (elem,Stack)</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>220</x><y>680</y><w>210</w><h>130</h></coordinates><panel_attributes>immutable.Queue
extends LinearSeq
--
Queue.empty
--
dequeue
enqueue(elem)
enqueue(iter)
front</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>0</x><y>500</y><w>210</w><h>130</h></coordinates><panel_attributes>immutable.Range
extends IndexedSeq[int]
--
start to endInclusive
start until endExclusive
--
by(step)
inclusive
isInclusive
</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>220</x><y>340</y><w>210</w><h>40</h></coordinates><panel_attributes>immutable.HashMap
extends Map
</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>220</x><y>110</y><w>210</w><h>40</h></coordinates><panel_attributes>immutable.HashSet
extends Set</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>220</x><y>400</y><w>210</w><h>70</h></coordinates><panel_attributes>immutable.TreeMap
extends SortedMap
--
TreeMap.empty
--</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>220</x><y>160</y><w>210</w><h>70</h></coordinates><panel_attributes>immutable.TreeSet
extends SortedSet
--
TreeSet.empty
--</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>220</x><y>240</y><w>210</w><h>80</h></coordinates><panel_attributes>immutable.BitSet
extends Set[Int]
--
BitSet.empty
--
^ (other)
</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>480</x><y>110</y><w>210</w><h>80</h></coordinates><panel_attributes>mutable.ArrayBuffer
extends Buffer
--
reduceToSize(sz)
sizeHint(size)
</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>480</x><y>200</y><w>210</w><h>70</h></coordinates><panel_attributes>mutable.ListBuffer
extends Buffer
--
prependToList(dest)
</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>480</x><y>280</y><w>210</w><h>50</h></coordinates><panel_attributes>mutable.MutableLinkedList
extends LinearSeq
</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>480</x><y>390</y><w>210</w><h>100</h></coordinates><panel_attributes>mutable.Queue
extends LinearSeq
--
dequeue()
dequeueFirst(p)
enqueue(x,...)</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>480</x><y>340</y><w>210</w><h>40</h></coordinates><panel_attributes>mutable.ArraySeq(length:Int)
extends IndexedSeq

</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>480</x><y>500</y><w>210</w><h>80</h></coordinates><panel_attributes>mutable.Stack
extends Seq
--
push(x,...)
pop()</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>480</x><y>590</y><w>210</w><h>100</h></coordinates><panel_attributes>mutable.ArrayStack
extends Seq
--
push(x,...)
pop()
drain(f)</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>700</x><y>110</y><w>210</w><h>40</h></coordinates><panel_attributes>mutable.HashSet
extends Set</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>700</x><y>160</y><w>210</w><h>40</h></coordinates><panel_attributes>mutable.HashMap
extends Map</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>700</x><y>210</y><w>210</w><h>60</h></coordinates><panel_attributes>mutable.WeakHashMap
extends JMapWrapper
--
underlying</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>700</x><y>280</y><w>210</w><h>110</h></coordinates><panel_attributes>mutable.ConcurrentMap
extends JMapWrapper
--
putIfAbsent(k,v)
remove(k,v)
replace(k,v)
replace(k,old,new)</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>700</x><y>400</y><w>210</w><h>70</h></coordinates><panel_attributes>mutable.Bitset
extends Set[Int]
--
^ (other)
</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.custom.Text</type><coordinates><x>80</x><y>60</y><w>290</w><h>40</h></coordinates><panel_attributes>Immutable Collections
scala.collection.immutable</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.custom.Text</type><coordinates><x>560</x><y>60</y><w>200</w><h>40</h></coordinates><panel_attributes>Mutable Collections
scala.collection.Mutable</panel_attributes><additional_attributes/></element></umlet_diagram>